@page "/"
@using ChatApp.Core.Models
@using ChatApp.Messaging.Interfaces
@rendermode InteractiveServer
@implements IAsyncDisposable
@inject IMessageQueueService MessageQueueService
@inject IJSRuntime JS

<PageTitle>@PageTitleConstants.ChatPage</PageTitle>

<h3>Chat Room</h3>

<div class="chat-box" @ref="chatBoxRef">
    @foreach (var msg in Messages)
    {
        <div class="chat-message">
            <b>@msg.Sender @(msg.Sender == @UserName ? " (You)" : ""):</b> @msg.Message
        </div>
    }
</div>
<div class="chat-input-container">
    <label for="usernameInput">Your name</label>
    <input type="text" placeholder="Name" @bind="UserName" id="usernameInput" class="chat-input-username" />
    <div>
        <label for="messageInput">Your message</label>
        <textarea placeholder="Message" @bind="UserMessage" id="messageInput" @onkeyup="@HandleKeyPress" class="chat-input-message" />
        <button @onclick="@SendMessage">Send</button>
    </div>
</div>

@code {
    private string UserMessage = string.Empty;
    private string UserName = string.Empty;
    private List<ChatMessageModel> Messages = [];
    private ElementReference chatBoxRef;

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await MessageQueueService.StartConsumingAsync(OnMessageConsumed);
    }

    private async Task OnMessageConsumed(ChatMessageModel chatMessageModel)
    {
        Messages.Add(chatMessageModel);
        await InvokeAsync(StateHasChanged);
        await JS.InvokeVoidAsync("chatHelpers.scrollToBottom", chatBoxRef);
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(UserMessage) || string.IsNullOrWhiteSpace(UserName)) 
            return;

        var message = new ChatMessageModel()
        {
            Sender = UserName,
            Message = UserMessage
        };

        await MessageQueueService.PublishAsync(message);
        UserMessage = string.Empty;
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }

    public async ValueTask DisposeAsync()
    {
        // ChatMessageService.OnMessageReceived -= async (message) =>
        // {
        //     Messages.Add(message);
        //     await InvokeAsync(StateHasChanged);
        // };

        await Task.CompletedTask;
    }
}
